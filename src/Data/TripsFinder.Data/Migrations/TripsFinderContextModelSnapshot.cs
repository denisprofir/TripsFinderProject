// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TripsFinder.Data.Context;

namespace TripsFinder.Data.Migrations
{
    [DbContext(typeof(TripsFinderContext))]
    partial class TripsFinderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Concrete.CheckPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<long>("TripId");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("CheckPoint");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Concrete.CheckPointFile", b =>
                {
                    b.Property<long>("CheckPointId");

                    b.Property<long>("MediaFileId");

                    b.HasKey("CheckPointId", "MediaFileId");

                    b.HasIndex("MediaFileId");

                    b.ToTable("CheckPointFile");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Concrete.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AnswerTo");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("Dislikes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<long>("TripId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Concrete.MediaFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("MediaFile");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Concrete.Trip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ArrivalPointId");

                    b.Property<long>("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<long?>("PosterImageId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<long>("StartingPointId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("ArrivalPointId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PosterImageId");

                    b.HasIndex("StartingPointId")
                        .IsUnique()
                        .HasName("UQ__Trips__17FA1EACAB460CFF");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Concrete.TripUser", b =>
                {
                    b.Property<long>("TripId");

                    b.Property<long>("UserId");

                    b.HasKey("TripId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TripUser");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<long?>("AvatarId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Country");

                    b.Property<long?>("CurrentTripId");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("CurrentTripId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Identity.UserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Identity.UserToken", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Concrete.CheckPoint", b =>
                {
                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Concrete.Trip", "Trip")
                        .WithMany("CheckPoints")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK_CheckPoints_Trips");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Concrete.CheckPointFile", b =>
                {
                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Concrete.CheckPoint", "CheckPoint")
                        .WithMany("CheckPointsFiles")
                        .HasForeignKey("CheckPointId")
                        .HasConstraintName("FK_CheckPointsFiles_MediaFiles");

                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Concrete.MediaFile", "MediaFile")
                        .WithMany("CheckPointsFiles")
                        .HasForeignKey("MediaFileId")
                        .HasConstraintName("FK_CheckPointsFiles_CheckPoints");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Concrete.Comment", b =>
                {
                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Concrete.Trip", "Trip")
                        .WithMany("Comments")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK_Comments_Trips");

                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Identity.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Comments_Users");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Concrete.Trip", b =>
                {
                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Concrete.CheckPoint", "ArrivalPoint")
                        .WithMany("TripsArrivalPoint")
                        .HasForeignKey("ArrivalPointId")
                        .HasConstraintName("FK_TripsEnd_CheckPoints");

                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Identity.User", "CreatedByUser")
                        .WithMany("Trips")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Trips_Users");

                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Concrete.MediaFile", "PosterImage")
                        .WithMany("Trips")
                        .HasForeignKey("PosterImageId")
                        .HasConstraintName("FK_Trips_MediaFiles");

                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Concrete.CheckPoint", "StartingPoint")
                        .WithOne("TripStartingPoint")
                        .HasForeignKey("TripsFinder.Data.Domain.DomainModels.Concrete.Trip", "StartingPointId")
                        .HasConstraintName("FK_TripsStart_CheckPoints");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Concrete.TripUser", b =>
                {
                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Concrete.Trip", "Trip")
                        .WithMany("TripUsers")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK_TripUsers_Trips");

                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Identity.User", "User")
                        .WithMany("TripUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_TripUsers_Users");
                });

            modelBuilder.Entity("TripsFinder.Data.Domain.DomainModels.Identity.User", b =>
                {
                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Concrete.MediaFile", "Avatar")
                        .WithMany("Users")
                        .HasForeignKey("AvatarId");

                    b.HasOne("TripsFinder.Data.Domain.DomainModels.Concrete.Trip", "CurrentTrip")
                        .WithMany("Users")
                        .HasForeignKey("CurrentTripId");
                });
#pragma warning restore 612, 618
        }
    }
}
